package com.yeongjin.YeongJin.Controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.yeongjin.YeongJin.Domain.Post;
import com.yeongjin.YeongJin.Repository.PostRepository;
import com.yeongjin.YeongJin.Request.PostCreate;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.http.MediaType.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

//mockMvcTest는 간단한 웹 레이어는 가능 but,서비스도 만들고 레포지토리도 만들어서 이걸론안되노
@SpringBootTest
@AutoConfigureMockMvc
class PostControllerTest {

    @Autowired
    private ObjectMapper objectmapper;

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    PostControllerTest(MockMvc mockMvc) {
        this.mockMvc = mockMvc;
    }

    @Autowired
    private PostRepository postRepository;

    @BeforeEach //각각의 메소드들이 실행해주기전 먼저 실행함!
    void clean() {
        postRepository.deleteAll();
    }



    @Test
    @DisplayName("/posts요청시 helloworld를 출력한다")
    void test() throws Exception {
        //글 내용
        //글 제목
        //given
        PostCreate request = PostCreate.builder()
                .title("제목입니다.")
                .content("내용입니다.")
                .build();

         //json -> object , object->json
        String json = objectmapper.writeValueAsString(request);

        //expected
        mockMvc.perform(post("/posts")
                        .contentType(APPLICATION_JSON)
                        .content(json)
                )
                .andExpect(status().isOk())
                .andExpect(content().string(""))
                .andDo(print());

    }
    @Test
    @DisplayName("/posts요청시 title값은 필수다")
    void test2() throws Exception {
        //given
            PostCreate request = PostCreate.builder()
                    .content("내용입니다.")
                    .build();

        String json = objectmapper.writeValueAsString(request);
        //when
        mockMvc.perform(post("/posts")
                                .contentType(APPLICATION_JSON)
                                .content(json)
                        )
                        .andExpect(status().isBadRequest())
                        .andExpect(jsonPath("$.code").value("400"))
                        .andExpect(jsonPath("$.message").value("잘못된 요청입니다."))
                        .andExpect(jsonPath("$.validation.title").value("타이틀을 입력해주세요"))
                        .andDo(print());

    }

    @Test
    @DisplayName("/posts요청시 DB에 값이 저장된다")
    void test3() throws Exception {
        //given
                PostCreate request = PostCreate.builder()
                        .title("제목입니다.")
                        .content("내용입니다.")
                        .build();

                String json = objectmapper.writeValueAsString(request);
        //when
        mockMvc.perform(post("/posts")
                                .contentType(APPLICATION_JSON)
                                .content(json)
                        )
                        .andExpect(status().isOk())
                        .andDo(print());
        //then
        assertEquals(1L, postRepository.count());
        Post post = postRepository.findAll().get(0);
        assertEquals("제목입니다.", post.getTitle());
        assertEquals("내용입니다.", post.getContent());

    }
}
